# Database
DATABASE_URL="postgresql://..."

# NextAuth.js
NEXTAUTH_SECRET="generate-with-openssl-rand-base64-32"
NEXTAUTH_URL="http://localhost:3001"

# Session Security (CRITICAL - Keep secret, rotate if compromised)
# Generate with: node -e "console.log(require('crypto').randomBytes(64).toString('hex'))"
SESSION_SECRET="your-256-bit-secret-here"

# Message Encryption (for encrypting messages at rest in database)
# Generate with: node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
ENCRYPTION_SECRET="your-encryption-secret-here"

# Cron Job Security (for automated cleanup tasks)
# Generate with: node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
CRON_SECRET="your-cron-secret-here"

# Upstash Redis (for distributed rate limiting + caching)
# Sign up at https://upstash.com (free tier: 10,000 requests/day)
# Create Redis database and copy credentials from dashboard
UPSTASH_REDIS_REST_URL="https://YOUR-REDIS-URL.upstash.io"
UPSTASH_REDIS_REST_TOKEN="your-upstash-token-here"
# Or use standard Redis:
# REDIS_URL="redis://user:password@host:port/db"

# Sentry (for error monitoring)
# Sign up at https://sentry.io (free tier: 5,000 errors/month)
# Create project and copy DSN from project settings
NEXT_PUBLIC_SENTRY_DSN="https://your-sentry-dsn@sentry.io/project-id"
SENTRY_ORG="your-org-name"
SENTRY_PROJECT="pengubook"

# OAuth Providers
DISCORD_CLIENT_ID=""
DISCORD_CLIENT_SECRET=""
TWITTER_CLIENT_ID=""
TWITTER_CLIENT_SECRET=""

# Abstract Blockchain
ABSTRACT_CHAIN_ID="2741"
ABSTRACT_RPC_URL="https://api.testnet.abs.xyz"
NEXT_PUBLIC_ABSTRACT_CHAIN_ID="2741"
NEXT_PUBLIC_ABSTRACT_RPC_URL="https://api.testnet.abs.xyz"

# Admin Access
NEXT_PUBLIC_ADMIN_WALLET_ADDRESS="0x..."

# Cloudinary (for image/video uploads)
# Sign up at https://cloudinary.com (free tier: 25GB storage, 25GB bandwidth/month)
CLOUDINARY_CLOUD_NAME="your-cloud-name"
CLOUDINARY_API_KEY="your-api-key"
CLOUDINARY_API_SECRET="your-api-secret"

# AWS Rekognition (for content moderation)
# Sign up at https://aws.amazon.com (free tier: 5,000 images/month, 1,000 video minutes/month)
# Create IAM user with AmazonRekognitionFullAccess policy
AWS_REGION="us-east-1"
AWS_ACCESS_KEY_ID="your-access-key-id"
AWS_SECRET_ACCESS_KEY="your-secret-access-key"

# Optional: Full video moderation (analyzes all frames, not just thumbnail)
# Leave as 'false' unless you need frame-by-frame video analysis
# Requires AWS S3 bucket setup
AWS_ENABLE_FULL_VIDEO_MODERATION="false"
# AWS_S3_BUCKET="your-s3-bucket-name" # Only needed if full video moderation enabled

# ===================================
# Phase 3: Operations & Monitoring
# ===================================

# Log Drain Integration (Optional - for production monitoring)
# Datadog: https://app.datadoghq.com/organization-settings/api-keys
DATADOG_API_KEY=""
DATADOG_SITE="datadoghq.com"  # US: datadoghq.com, EU: datadoghq.eu
DATADOG_SERVICE="pebloq"

# Axiom: https://app.axiom.co/settings/tokens
AXIOM_TOKEN=""
AXIOM_DATASET="pebloq-logs"
AXIOM_ORG_ID=""  # Optional for multi-tenant

# Grafana Loki: Self-hosted or Grafana Cloud
LOKI_URL=""
LOKI_USERNAME=""  # Optional
LOKI_PASSWORD=""  # Optional
LOKI_TENANT=""    # Optional

# Enable log drains in development (default: production only)
LOG_DRAIN_ENABLED="false"
LOG_DRAIN_CONSOLE="false"

# Alert Webhooks (Optional - for critical alerts)
# Discord: Server Settings → Integrations → Webhooks
DISCORD_WEBHOOK_URL=""

# Slack: https://api.slack.com/messaging/webhooks
SLACK_WEBHOOK_URL=""

# Generic webhook (PagerDuty, Opsgenie, custom)
GENERIC_WEBHOOK_URL=""

# Alert rate limiting (milliseconds between alerts, default: 60000)
ALERT_RATE_LIMIT_MS="60000"

# Health Check (No configuration needed - works out of the box)
# Access at: GET /api/health
# Monitors: database, memory, dependencies
# Returns: 200 (healthy/degraded) or 503 (unhealthy)

# Incidents API (Admin-only, no configuration needed)
# Access at: GET/POST /api/incidents
# Requires: Admin authentication
# Tracks: Security incidents, anomalies, response actions
