generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String               @id @default(cuid())
  walletAddress         String?              @unique
  email                 String?              @unique
  name                  String?
  image                 String?
  username              String?              @unique
  displayName           String?
  bio                   String?
  avatar                String?
  discordId             String?              @unique
  discordName           String?
  twitterId             String?              @unique
  twitterHandle         String?
  isAdmin               Boolean              @default(false)
  isBanned              Boolean              @default(false)
  isOnline              Boolean              @default(false)
  lastSeen              DateTime             @default(now())
  level                 Int                  @default(1)
  xp                    Int                  @default(0)
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  publicKey             String?
  activities            Activity[]
  adInteractions        AdInteraction[]      @relation("AdInteractions")
  adsCreated            Advertisement[]      @relation("AdCreator")
  comments              Comment[]
  communityMembers      CommunityMember[]
  moderatedCommunities  CommunityModerator[]
  followers             Follow[]             @relation("UserFollowers")
  following             Follow[]             @relation("UserFollowing")
  friendsInitiated      Friendship[]         @relation("FriendshipInitiator")
  friendsReceived       Friendship[]         @relation("FriendshipReceiver")
  likes                 Like[]
  messagesSent          Message[]            @relation("MessageSender")
  messageReadReceipts   MessageReadReceipt[] @relation("MessageReadReceipts")
  notificationsSent     Notification[]       @relation("NotificationFrom")
  notificationsReceived Notification[]       @relation("NotificationTo")
  posts                 Post[]
  profile               Profile?
  reactions             Reaction[]
  shares                Share[]
  streaks               Streak[]
  tipsGiven             Tip[]                @relation("TipFrom")
  tipsReceived          Tip[]                @relation("TipTo")
  userAchievements      UserAchievement[]
  postEdits             PostEdit[]           @relation("PostEdits")
  accounts              Account[]
  sessions              Session[]
}

model Profile {
  id                  String  @id @default(cuid())
  userId              String  @unique
  socialLinks         String  @default("[]")
  interests           String  @default("[]")
  location            String?
  website             String?
  company             String?
  timezone            String?
  languages           String  @default("[]")
  skills              String  @default("[]")
  tipCount            Int     @default(0)
  totalTipsReceived   Float   @default(0)
  followersCount      Int     @default(0)
  followingCount      Int     @default(0)
  postsCount          Int     @default(0)
  likesReceived       Int     @default(0)
  isPrivate           Boolean @default(false)
  showActivity        Boolean @default(true)
  showTips            Boolean @default(true)
  allowDirectMessages Boolean @default(true)
  theme               String  @default("default")
  bannerImage         String?
  profileVerified     Boolean @default(false)
  user                User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Token {
  id              String  @id @default(cuid())
  name            String
  symbol          String  @unique
  contractAddress String  @unique
  decimals        Int
  isEnabled       Boolean @default(true)
  logoUrl         String?
  tips            Tip[]
}

model Tip {
  id              String   @id @default(cuid())
  fromUserId      String
  toUserId        String
  tokenId         String
  amount          String
  transactionHash String   @unique
  status          String   @default("PENDING")
  message         String?  // Public note/message attached to the tip
  isPublic        Boolean  @default(true) // Whether the tip message is visible on profile
  createdAt       DateTime @default(now())
  fromUser        User     @relation("TipFrom", fields: [fromUserId], references: [id])
  toUser          User     @relation("TipTo", fields: [toUserId], references: [id])
  token           Token    @relation(fields: [tokenId], references: [id])

  @@index([status])
  @@index([fromUserId, status])
  @@index([toUserId, status])
}

model Post {
  id          String     @id @default(cuid())
  authorId    String
  content     String
  contentType String     @default("TEXT")
  mediaUrls   String     @default("[]")
  visibility  String     @default("PUBLIC")
  isPromoted  Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  comments    Comment[]
  feedItems   FeedItem[]
  likes       Like[]
  author      User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  reactions   Reaction[]
  shares      Share[]
  edits       PostEdit[]

  @@index([authorId])
  @@index([createdAt])
  @@index([isPromoted])
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([postId])
}

model Comment {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@index([createdAt])
}

model Share {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([postId])
}

model Reaction {
  id           String   @id @default(cuid())
  userId       String
  postId       String
  reactionType String
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post         Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId, reactionType])
  @@index([postId])
  @@index([userId])
  @@index([reactionType])
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  follower    User     @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model FeedItem {
  id        String   @id @default(cuid())
  userId    String
  postId    String?
  itemType  String   @default("POST")
  priority  Int      @default(0)
  createdAt DateTime @default(now())
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([priority])
}

model Engagement {
  id         String   @id @default(cuid())
  userId     String
  postId     String
  actionType String
  duration   Int?
  createdAt  DateTime @default(now())

  @@index([userId])
  @@index([postId])
  @@index([actionType])
  @@index([createdAt])
}

model Friendship {
  id          String   @id @default(cuid())
  initiatorId String
  receiverId  String
  status      String   @default("PENDING")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  initiator   User     @relation("FriendshipInitiator", fields: [initiatorId], references: [id], onDelete: Cascade)
  receiver    User     @relation("FriendshipReceiver", fields: [receiverId], references: [id], onDelete: Cascade)

  @@unique([initiatorId, receiverId])
  @@index([initiatorId])
  @@index([receiverId])
}

model Activity {
  id           String   @id @default(cuid())
  userId       String
  activityType String
  content      String?
  targetId     String?
  targetType   String?
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
}

model Conversation {
  id               String    @id @default(cuid())
  participants     String
  isGroup          Boolean   @default(false)
  groupName        String?
  groupAvatar      String?
  groupDescription String?
  createdBy        String?
  adminIds         String    @default("[]")
  lastMessage      String?
  lastMessageAt    DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  messages         Message[]

  @@index([lastMessageAt])
  @@index([isGroup])
  @@index([createdBy])
}

model Message {
  id             String               @id @default(cuid())
  conversationId String
  senderId       String
  content        String
  messageType    String               @default("TEXT")
  mediaUrls      String               @default("[]")
  isRead         Boolean              @default(false)
  isEncrypted    Boolean              @default(false)
  encryptedData  String?
  createdAt      DateTime             @default(now())
  sender         User                 @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  conversation   Conversation         @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  readReceipts   MessageReadReceipt[]

  @@index([conversationId])
  @@index([senderId])
  @@index([createdAt])
  @@index([isRead])
  @@index([isEncrypted])
}

model MessageReadReceipt {
  id        String   @id @default(cuid())
  messageId String
  userId    String
  readAt    DateTime @default(now())
  user      User     @relation("MessageReadReceipts", fields: [userId], references: [id], onDelete: Cascade)
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId])
  @@index([messageId])
  @@index([userId])
  @@index([readAt])
}

model Advertisement {
  id             String          @id @default(cuid())
  creatorId      String
  title          String
  description    String
  imageUrl       String?
  linkUrl        String?
  targetAudience String          @default("ALL")
  budget         Float           @default(0)
  costPerClick   Float           @default(0.01)
  costPerView    Float           @default(0.001)
  isActive       Boolean         @default(true)
  startDate      DateTime        @default(now())
  endDate        DateTime?
  totalViews     Int             @default(0)
  totalClicks    Int             @default(0)
  totalSpent     Float           @default(0)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  interactions   AdInteraction[]
  creator        User            @relation("AdCreator", fields: [creatorId], references: [id], onDelete: Cascade)

  @@index([creatorId])
  @@index([isActive])
  @@index([startDate, endDate])
}

model AdInteraction {
  id              String        @id @default(cuid())
  adId            String
  userId          String?
  interactionType String
  createdAt       DateTime      @default(now())
  user            User?         @relation("AdInteractions", fields: [userId], references: [id])
  ad              Advertisement @relation(fields: [adId], references: [id], onDelete: Cascade)

  @@index([adId])
  @@index([userId])
  @@index([interactionType])
  @@index([createdAt])
}

model Community {
  id                   String               @id @default(cuid())
  name                 String               @unique
  displayName          String
  description          String
  avatar               String?
  banner               String?
  category             String
  tags                 String               @default("[]")
  visibility           String               @default("PUBLIC")
  rules                String?
  isOfficial           Boolean              @default(false)
  creatorId            String
  membersCount         Int                  @default(0)
  postsCount           Int                  @default(0)
  isTokenGated         Boolean              @default(false)
  tokenGateType        String?
  tokenContractAddress String?
  tokenMinAmount       String?
  tokenIds             String?              @default("[]")
  tokenSymbol          String?
  tokenDecimals        Int?
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  members              CommunityMember[]
  moderators           CommunityModerator[]

  @@index([name])
  @@index([category])
  @@index([creatorId])
  @@index([isTokenGated])
}

model CommunityMember {
  id          String    @id @default(cuid())
  userId      String
  communityId String
  role        String    @default("MEMBER")
  joinedAt    DateTime  @default(now())
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, communityId])
  @@index([communityId])
}

model CommunityModerator {
  id          String    @id @default(cuid())
  userId      String
  communityId String
  permissions String    @default("[]")
  assignedAt  DateTime  @default(now())
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, communityId])
  @@index([communityId])
}

model UserAchievement {
  id            String   @id @default(cuid())
  userId        String
  achievementId String
  unlockedAt    DateTime @default(now())
  progress      Int      @default(100)
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
  @@index([userId])
}

model Streak {
  id           String   @id @default(cuid())
  userId       String
  streakType   String
  currentCount Int      @default(0)
  bestCount    Int      @default(0)
  lastDate     DateTime @default(now())
  isActive     Boolean  @default(true)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, streakType])
  @@index([userId])
}

model Notification {
  id         String   @id @default(cuid())
  fromUserId String?
  toUserId   String
  type       String
  title      String
  content    String
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())
  fromUser   User?    @relation("NotificationFrom", fields: [fromUserId], references: [id])
  toUser     User     @relation("NotificationTo", fields: [toUserId], references: [id], onDelete: Cascade)

  @@index([toUserId])
  @@index([createdAt])
}

model PostEdit {
  id              String   @id @default(cuid())
  postId          String
  previousContent String
  newContent      String
  editedAt        DateTime @default(now())
  editedBy        String
  post            Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  editor          User     @relation("PostEdits", fields: [editedBy], references: [id], onDelete: Cascade)

  @@index([postId])
  @@index([editedAt])
}

// NextAuth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
